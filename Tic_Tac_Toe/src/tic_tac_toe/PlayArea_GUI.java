/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tic_tac_toe;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.Random;
import java.util.Stack;
import javax.swing.JOptionPane;
import javax.swing.JButton;
/**
 *
 * @author Matthew
 */
public class PlayArea_GUI extends javax.swing.JFrame implements ActionListener {
    //Fields
    private int playersTurn; //Holds who turn it is (Player1 = 0, Player2 = 1)
    private int[][] ticTacToeAreaGrid = new int[3][3];  //Holds which positions each player has clicked
    private JButton[][] ticTacToeBtnsGrid = new JButton[3][3];  //This will hold reference to the buttons in the GUI
    private Stack<PreviousPlayerAction> previousPlayerActions;  //This will be used for the Undo functionality
    
    
    /**
     * Creates new form PlayArea_GUI
     */
    public PlayArea_GUI() {
        initComponents();
        
        //Setting up ticTacToeBtnsGrid Array to hold reference to the buttons in the GUI
        ticTacToeBtnsGrid[0][0] = ticTacToeSquare_0;
        ticTacToeBtnsGrid[1][0] = ticTacToeSquare_1;
        ticTacToeBtnsGrid[2][0] = ticTacToeSquare_2;
        ticTacToeBtnsGrid[0][1] = ticTacToeSquare_3;
        ticTacToeBtnsGrid[1][1] = ticTacToeSquare_4;
        ticTacToeBtnsGrid[2][1] = ticTacToeSquare_5;
        ticTacToeBtnsGrid[0][2] = ticTacToeSquare_6;
        ticTacToeBtnsGrid[1][2] = ticTacToeSquare_7;
        ticTacToeBtnsGrid[2][2] = ticTacToeSquare_8;
        
        //Adding the Default Action Listener to handle when the user clicks on the squares
        for (JButton[] ticTacToeBtnsGridX : ticTacToeBtnsGrid) {
            for (JButton ticTacToeBtnsGrid_Btn : ticTacToeBtnsGridX) {
                ticTacToeBtnsGrid_Btn.addActionListener(this);
            }
        }
        /*
        ticTacToeSquare_0.addActionListener(this);
        ticTacToeSquare_1.addActionListener(this);
        ticTacToeSquare_2.addActionListener(this);
        ticTacToeSquare_3.addActionListener(this);
        ticTacToeSquare_4.addActionListener(this);
        ticTacToeSquare_5.addActionListener(this);
        ticTacToeSquare_6.addActionListener(this);
        ticTacToeSquare_7.addActionListener(this);
        ticTacToeSquare_8.addActionListener(this);
        */
        
        //Setting up ticTacToeGrid Array (This will be used to determine if a player won
        clearTicTacToeAreaGridArray();
        //Determining which player should go first
        getAndSetStartingPlayer();
        
        //Creating an instance stack to be used for the Undo functionality
        previousPlayerActions = new Stack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ticTacToeArea = new javax.swing.JPanel();
        ticTacToeSquare_1 = new javax.swing.JButton();
        ticTacToeSquare_2 = new javax.swing.JButton();
        ticTacToeSquare_0 = new javax.swing.JButton();
        ticTacToeSquare_3 = new javax.swing.JButton();
        ticTacToeSquare_4 = new javax.swing.JButton();
        ticTacToeSquare_5 = new javax.swing.JButton();
        ticTacToeSquare_6 = new javax.swing.JButton();
        ticTacToeSquare_7 = new javax.swing.JButton();
        ticTacToeSquare_8 = new javax.swing.JButton();
        userInfoArea = new javax.swing.JPanel();
        howToPlay_Btn = new javax.swing.JButton();
        undo_Btn = new javax.swing.JButton();
        restart_Btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        playerTurn_Label = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ticTacToeArea.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        ticTacToeSquare_1.setFont(new java.awt.Font("Tahoma", 1, 64)); // NOI18N
        ticTacToeSquare_1.setName("ticTacToeSquare_1_0"); // NOI18N
        ticTacToeSquare_1.setPreferredSize(new java.awt.Dimension(90, 90));

        ticTacToeSquare_2.setFont(new java.awt.Font("Tahoma", 1, 64)); // NOI18N
        ticTacToeSquare_2.setName("ticTacToeSquare_2_0"); // NOI18N
        ticTacToeSquare_2.setPreferredSize(new java.awt.Dimension(90, 90));

        ticTacToeSquare_0.setFont(new java.awt.Font("Tahoma", 1, 64)); // NOI18N
        ticTacToeSquare_0.setName("ticTacToeSquare_0_0"); // NOI18N
        ticTacToeSquare_0.setPreferredSize(new java.awt.Dimension(90, 90));

        ticTacToeSquare_3.setFont(new java.awt.Font("Tahoma", 1, 64)); // NOI18N
        ticTacToeSquare_3.setName("ticTacToeSquare_0_1"); // NOI18N
        ticTacToeSquare_3.setPreferredSize(new java.awt.Dimension(90, 90));

        ticTacToeSquare_4.setFont(new java.awt.Font("Tahoma", 1, 64)); // NOI18N
        ticTacToeSquare_4.setName("ticTacToeSquare_1_1"); // NOI18N
        ticTacToeSquare_4.setPreferredSize(new java.awt.Dimension(90, 90));

        ticTacToeSquare_5.setFont(new java.awt.Font("Tahoma", 1, 64)); // NOI18N
        ticTacToeSquare_5.setName("ticTacToeSquare_2_1"); // NOI18N
        ticTacToeSquare_5.setPreferredSize(new java.awt.Dimension(90, 90));

        ticTacToeSquare_6.setFont(new java.awt.Font("Tahoma", 1, 64)); // NOI18N
        ticTacToeSquare_6.setName("ticTacToeSquare_0_2"); // NOI18N
        ticTacToeSquare_6.setPreferredSize(new java.awt.Dimension(90, 90));

        ticTacToeSquare_7.setFont(new java.awt.Font("Tahoma", 1, 64)); // NOI18N
        ticTacToeSquare_7.setName("ticTacToeSquare_1_2"); // NOI18N
        ticTacToeSquare_7.setPreferredSize(new java.awt.Dimension(90, 90));

        ticTacToeSquare_8.setFont(new java.awt.Font("Tahoma", 1, 64)); // NOI18N
        ticTacToeSquare_8.setName("ticTacToeSquare_2_2"); // NOI18N
        ticTacToeSquare_8.setPreferredSize(new java.awt.Dimension(90, 90));

        javax.swing.GroupLayout ticTacToeAreaLayout = new javax.swing.GroupLayout(ticTacToeArea);
        ticTacToeArea.setLayout(ticTacToeAreaLayout);
        ticTacToeAreaLayout.setHorizontalGroup(
            ticTacToeAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ticTacToeAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ticTacToeAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ticTacToeSquare_3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ticTacToeSquare_6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ticTacToeSquare_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(ticTacToeAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ticTacToeSquare_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ticTacToeSquare_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ticTacToeSquare_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(ticTacToeAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ticTacToeAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ticTacToeSquare_2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ticTacToeSquare_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ticTacToeSquare_8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        ticTacToeAreaLayout.setVerticalGroup(
            ticTacToeAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ticTacToeAreaLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(ticTacToeAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ticTacToeSquare_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ticTacToeSquare_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ticTacToeSquare_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(ticTacToeAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ticTacToeSquare_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ticTacToeSquare_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ticTacToeSquare_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(ticTacToeAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ticTacToeSquare_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ticTacToeSquare_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ticTacToeSquare_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        userInfoArea.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        howToPlay_Btn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        howToPlay_Btn.setText("How to play?");

        undo_Btn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        undo_Btn.setText("Undo");
        undo_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undo_BtnActionPerformed(evt);
            }
        });

        restart_Btn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        restart_Btn.setText("Restart");
        restart_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restart_BtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Players Info.");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Player 1: X");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Player 2: O");

        playerTurn_Label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        playerTurn_Label.setText("Player 1");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Who's Turn?");

        javax.swing.GroupLayout userInfoAreaLayout = new javax.swing.GroupLayout(userInfoArea);
        userInfoArea.setLayout(userInfoAreaLayout);
        userInfoAreaLayout.setHorizontalGroup(
            userInfoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInfoAreaLayout.createSequentialGroup()
                .addGroup(userInfoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userInfoAreaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(userInfoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(undo_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(howToPlay_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(restart_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(userInfoAreaLayout.createSequentialGroup()
                        .addGroup(userInfoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userInfoAreaLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(userInfoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1)))
                            .addGroup(userInfoAreaLayout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(playerTurn_Label))
                            .addGroup(userInfoAreaLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(userInfoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))))
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addContainerGap())
        );
        userInfoAreaLayout.setVerticalGroup(
            userInfoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userInfoAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerTurn_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(howToPlay_Btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(undo_Btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(restart_Btn)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ticTacToeArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(userInfoArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userInfoArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ticTacToeArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void restart_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restart_BtnActionPerformed
        // TODO add your handling code here:
        restartGame();
    }//GEN-LAST:event_restart_BtnActionPerformed

    private void undo_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undo_BtnActionPerformed
        //Checking if there are actions to undo
        if (!previousPlayerActions.empty()){    //If the stack is not empty
            PreviousPlayerAction prevAction = previousPlayerActions.pop();
        
            //Setting the current players turn to the one that was stored
            if (playersTurn != prevAction.getPlayersTurn()){    //Checking if the playersTurn value needs to be updated
                switchPlayerTurns();
            }

            //Setting the current ticTacToeAreaGrid to the one that was stored
            ticTacToeAreaGrid = prevAction.getGridLayout();

            //Updating the GUI (The Tic Tac Toes Square) to reflect the changes
            refreshTicTacToeSquares();
        }else{
            JOptionPane.showMessageDialog(rootPane, "There are no actions to undo!");
        }
    }//GEN-LAST:event_undo_BtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayArea_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayArea_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayArea_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayArea_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayArea_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton howToPlay_Btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel playerTurn_Label;
    private javax.swing.JButton restart_Btn;
    private javax.swing.JPanel ticTacToeArea;
    private javax.swing.JButton ticTacToeSquare_0;
    private javax.swing.JButton ticTacToeSquare_1;
    private javax.swing.JButton ticTacToeSquare_2;
    private javax.swing.JButton ticTacToeSquare_3;
    private javax.swing.JButton ticTacToeSquare_4;
    private javax.swing.JButton ticTacToeSquare_5;
    private javax.swing.JButton ticTacToeSquare_6;
    private javax.swing.JButton ticTacToeSquare_7;
    private javax.swing.JButton ticTacToeSquare_8;
    private javax.swing.JButton undo_Btn;
    private javax.swing.JPanel userInfoArea;
    // End of variables declaration//GEN-END:variables
    
    //This function handles when a tic tac toe square is clicked
    public void actionPerformed(ActionEvent e) {
        JButton btnThatWasClicked = (JButton)e.getSource(); //Getting the button object that was clicked
        String btnThatWasClickedName = btnThatWasClicked.getName(); //Getting the name of the button that was clicked
        int btnThatWasClicked_XPosition = Integer.parseInt(btnThatWasClickedName.split("_")[1]);    //Getting the button's that was clicked X position in the GUI
        int btnThatWasClicked_YPosition = Integer.parseInt(btnThatWasClickedName.split("_")[2]);    //Getting the button's that was clicked Y position in the GUI
        
        //Checking if the square the user clicked is blank
        if (ticTacToeAreaGrid[btnThatWasClicked_XPosition][btnThatWasClicked_YPosition] == -1){
            //Taking a hard copy of the current state of the game
            takeHardCopyOfCurrentStateOfGame();
            
            //Checking which player click the square
            if (playersTurn == 0){
                btnThatWasClicked.setText("X"); //Putting an X in the btn that was clicked
                //Setting the Grid array to reflect the newly click button
                ticTacToeAreaGrid[btnThatWasClicked_XPosition][btnThatWasClicked_YPosition] = 0;
                //Checking to see if the player made a winning move
                if(checkIfWinner(0) == 0){
                    if(JOptionPane.showConfirmDialog(rootPane, "Player 1 Won! \n Would you like to play again?") == JOptionPane.YES_OPTION){
                        //Restarting the game
                        restartGame();
                    }else{
                        System.exit(0); //Closing the Game
                    }
                }else{
                    switchPlayerTurns();    //Making it player2's turn
                }
                
            }else{  //Since it is not player1's turn, it must be player2's turn
                btnThatWasClicked.setText("O"); //Putting an O in the btn that was clicked
                //Setting the Grid array to reflect the newly click button
                ticTacToeAreaGrid[btnThatWasClicked_XPosition][btnThatWasClicked_YPosition] = 1;
                //Checking to see if the player made a winning move
                if(checkIfWinner(1) == 1){
                    if(JOptionPane.showConfirmDialog(rootPane, "Player 2 Won! \n Would you like to play again?") == JOptionPane.YES_OPTION){
                        //Restarting the game
                        restartGame();
                    }else{
                        System.exit(0); //Closing the Game
                    }
                }else{
                    switchPlayerTurns();    //Making it player2's turn
                }
            }
        }else{ //This button is not blank so, telling the users this button has already been clicked
            JOptionPane.showMessageDialog(rootPane, "This square has already been clicked");
        }
    }
    
    //When called, this will switch which players turn it is (Updates variable and GUI to reflect this)
    private void switchPlayerTurns(){
        if (playersTurn == 0){  //Since it is player 1's turn
            playersTurn = 1;    //Making it player 2's turn
            playerTurn_Label.setText("Player 2");   //Changing the GUI to reflect that it is player 2's turn
        }else{  //Since it is player 2's turn
            playersTurn = 0;    //Making it player 1's turn
            playerTurn_Label.setText("Player 1");   //Changing the GUI to reflect that it is player 1's turn
        }
    }
    
    //Clears the ticTacToeAreaGrid (2D Array) and sets all position to -1 (Blank)
    public void clearTicTacToeAreaGridArray(){
        //Setting all spaces in the grid to -1 (Blank)
        for (int[] ticTacToeAreaGridX : ticTacToeAreaGrid) {
            for (int y = 0; y < ticTacToeAreaGridX.length; y++) {
                ticTacToeAreaGridX[y] = -1;
            }
        }
    }
    
    //Clears the tic tac toes squares (GUI) by setting there text to ""
    private void clearTicTacToeGUISquares(){
        ticTacToeSquare_0.setText("");
        ticTacToeSquare_1.setText("");
        ticTacToeSquare_2.setText("");
        ticTacToeSquare_3.setText("");
        ticTacToeSquare_4.setText("");
        ticTacToeSquare_5.setText("");
        ticTacToeSquare_6.setText("");
        ticTacToeSquare_7.setText("");
        ticTacToeSquare_8.setText("");
    }
    
    //Resets the Game
    private void restartGame(){
        clearTicTacToeAreaGridArray();
        clearTicTacToeGUISquares();
        getAndSetStartingPlayer();
        previousPlayerActions = new Stack();    //Clearing the stack of previous user actions
    }
    
    private int checkIfWinner(int playerNum){
        //Checking if there is three of the same numbers going horizontally (left to right) for all three rows
        for (int y = 0; y < 3; y++){
            if (ticTacToeAreaGrid[0][y] == playerNum && ticTacToeAreaGrid[1][y] == playerNum && ticTacToeAreaGrid[2][y] == playerNum){
                return playerNum;
            }
        }
        //Checking if there is three of the same number going vertically (top to bottom) for all three columns
        for (int x = 0; x < 3; x++){
            if (ticTacToeAreaGrid[x][0] == playerNum && ticTacToeAreaGrid[x][1] == playerNum && ticTacToeAreaGrid[x][2] == playerNum){
                return playerNum;
            }
        }
        //Checking if there is three of the same numbers going diagonally (Top Left to Bottom Right)
        if (ticTacToeAreaGrid[0][0] == playerNum && ticTacToeAreaGrid[1][1] == playerNum && ticTacToeAreaGrid[2][2] == playerNum){
            return playerNum;
        }
        //Checking if there is three of the same numbers going diagonally (Bottom Left Top Right)
        if (ticTacToeAreaGrid[0][2] == playerNum && ticTacToeAreaGrid[1][1] == playerNum && ticTacToeAreaGrid[2][0] == playerNum){
            return playerNum;
        }
        
        //Since no winners where found, returning -1
        return -1;
    }
    
    //Determines which player will start and set what is needed accordingly (variables and GUI)
    private void getAndSetStartingPlayer(){
        Random ranObj = new Random();
        
        //Getting which player is going to start
        if(ranObj.nextInt(2) == 0){ //Getting a number between 0 and 1
            playersTurn = 0;    //Making it player 1's turn
            playerTurn_Label.setText("Player 1");   //Changing the GUI to reflect that it is player 1's turn
        }else{  //Since it did not return player 1's turn, it must be player 2's turn
            playersTurn = 1;    //Making it player 2's turn
            playerTurn_Label.setText("Player 2");   //Changing the GUI to reflect that it is player 2's turn
        }
    }
    
    //Makes a hard copy of the current ticTacToeGrid and the current players turn and adds this object to the Stack
    private void takeHardCopyOfCurrentStateOfGame(){
        int[][] tmpGrid = new int[3][3];
        
        //Setting all spaces in the grid to -1 (Blank)
        for (int x = 0; x < ticTacToeAreaGrid.length; x++) {
            for (int y = 0; y < ticTacToeAreaGrid[x].length; y++) {
                tmpGrid[x][y] = ticTacToeAreaGrid[x][y];
            }
        }
        
        previousPlayerActions.push(new PreviousPlayerAction(playersTurn, tmpGrid));
    }
    
    //Updates the GUI Tic Tac Toe Square to reflect the current values in the ticTacToeGridArea Array
    private void refreshTicTacToeSquares(){
        //Going through all of the Tic Tac Toe Squares in the GUI
        for (int x = 0; x < ticTacToeAreaGrid.length; x++){
            for (int y = 0; y < ticTacToeAreaGrid[x].length; y++){
                if (ticTacToeAreaGrid[x][y] == 0){  //Checking if this is player 1's square
                    ticTacToeBtnsGrid[x][y].setText("X");
                }else if (ticTacToeAreaGrid[x][y] == 1){    //Checking if this is player 2's square
                    ticTacToeBtnsGrid[x][y].setText("O");
                }else{  //Then, it must be a blank square
                    ticTacToeBtnsGrid[x][y].setText("");
                }
                
            }
        }
    }
}
